=1 Data-Sources =

A _*Crux*_ DataSource is a class used to provide a set of data to widgets. Some widgets delivered in {{{crux-widgets.jar}}} supports the use of a DataSource.

The following example shows a grid widget associated with a dataSource:

{{{
<html 
   xmlns="http://www.w3.org/1999/xhtml"
   xmlns:c="http://www.sysmap.com.br/crux" 
   xmlns:a="http://www.sysmap.com.br/crux/widgets">
      
      <c:screen useDataSource="simpleGridDataSource" useFormatter="birthday"/>
      
      <a:grid id="simpleGrid" height="200" width="100%" dataSource="simpleGridDataSource" 
                   stretchColumns="true" pageSize="7" highlightRowOnMouseOver="true">
         <a:dataColumn key="name" label="Name"/>
         <a:dataColumn key="phone" label="Phone"/>
         <a:dataColumn key="birthday" label="Birthday" formatter="birthday"/>
      </a:grid>
</html>
}}}

The DataSource class:
{{{
@DataSource("simpleGridDataSource")
@DataSourceBinding(identifier="name")
public static class SimpleGridDataSource extends LocalBindableEditablePagedDataSource<Contact> {
   @Create
   protected SimpleGridServiceAsync service;

   public void load()
   {
      service.getContactList(new DataSourceAsyncCallbackAdapter<Contact>(this));
   }		
}
}}}

Note that you must declare a DataSource with the annotation {{{@DataSource}}} and then import it into your page using the screen attribute {{{useDataSource}}}.  We can compare it with the Annotation {{{@Controller}}} and the {{{useController}}} screen attribute.

The main difference between DataSources and Controllers is the final porpouse of these two classes. Controllers are used to handle widget events and Data-Sources are used to load a set of data to serve a widget.

Any DataSource must implement the interface {{{br.com.sysmap.crux.core.client.datasource.DataSource}}} and one of the two interfaces: {{{br.com.sysmap.crux.core.client.datasource.LocalDataSource}}} or {{{br.com.sysmap.crux.core.client.datasource.RemoteDataSource}}} .  

=2 Data-Sources Hierarchy =

Any DataSource must implements the interface {{{br.com.sysmap.crux.core.client.datasource.DataSource}}}. However, a lot of other DataSource interfaces are provided by _*Crux*_, to support some other features like pagination or editing.

Your DataSource class can implement more of those interfaces. The following figure shows the complete list of interfaces available:

[http://crux-framework.googlecode.com/svn/wiki/images/dataSources.jpg]

|| *Interface* || *Description* ||
|| DataSource || The basic interface for any DataSource. Contains the basic methods to navigating in records and sorting.|| 
|| LocalDataSource || Local DataSources loads the data in just one step and keeps it in a local buffer. Contains the method {{{load()}}}|| 
|| PagedDataSource || A DataSource that can divide data in blocks called _pages_. Contains the method {{{fetch(int start, int end)}}} <br>that is called by the associated widget when it needs the information contained in a page.|| 
|| RemoteDataSource || Remote DataSources are also paged. This interface supports the cases when the data resides on the server. <br>When a page is needed, the DataSource requests it to server. It also keeps a buffer of the <br>already loaded pages. || 
|| MeasurableDataSource || A DataSource that can be measured. In other words, when the number of records of the DataSource can be determined.<br> Contains the method {{{getRecordCount()}}} || 
|| StreamingDataSource || A DataSource that retrieves its data from a stream. The size of this stream is unknow.<br> Streaming DataSources are also paged, but is not possible to know the number of pages before request the last one. <br> All the pages must be requested in order.|| 
|| EditableDataSource || DataSources that allows records selection or edition. Contains the methods to retrieve the modified records|| 
|| BindableDataSource || The data inside a DataSource can be structured as an array of records or as an array of Objects. <br> BindableDataSources allows you to use a Value Object to store the information.|| 

==2.1 Data-Source Abstract classes ==

_*Crux*_ also provides a set of abstract classes that you can use to create a DataSource. Those classes implements different combination of the above interfaces to simplify your implementation. Using one of those classes, you just must implement the method to retrieve the data itself:
  * For local DataSources: void load();
  * For remote DataSources: void fetch(int start, int end);

The following figures shows some of those classes:

[http://crux-framework.googlecode.com/svn/wiki/images/localDataSources.jpg]

and

[http://crux-framework.googlecode.com/svn/wiki/images/remoteDataSources.jpg]

The complete list of basic abstract DataSources classes provided by _*Crux*_:

|| *Class* || *Implemented Datasource Interfaces* ||
|| LocaScrollableDataSource || LocalDataSource ||
|| LocaPagedDataSource || LocalDataSource, PagedDataSource ||
|| LocalEditableScrollableDataSource || LocalDataSource, EditableDataSource ||
|| LocalEditablePagedDataSource || LocalDataSource, EditableDataSource, PagedDataSource ||
|| LocalBindableScrollableDataSource<T> || LocalDataSource, BindableDataSource<T> ||
|| LocalBindablePagedDataSource<T> || LocalDataSource, PagedDataSource, BindableDataSource<T> ||
|| LocalBindableEditableScrollableDataSource<T> || LocalDataSource, EditableDataSource, BindableDataSource<T> ||
|| LocalBindableEditablePagedDataSource<T> || LocalDataSource, EditableDataSource, PagedDataSource, BindableDataSource<T> ||
|| RemotePagedDataSource<T> || RemoteDataSource ||
|| RemoteStreamingDataSource<T> || StreamingDataSource ||
|| RemoteEditablePagedDataSource<T> || RemoteDataSource, EditableDataSource ||
|| RemoteEditableStreamingDataSource || StreamingDataSource, EditableDataSource,  ||
|| RemoteBindablePagedDataSource<T> || RemoteDataSource, BindableDataSource<T> ||
|| RemoteBindableStreamingDataSource<T> || StreamingDataSource, BindableDataSource<T> ||
|| RemoteBindableEditablePagedDataSource<T> || RemoteDataSource, EditableDataSource, BindableDataSource<T> ||
|| RemoteBindableEditableStreamingDataSource<T> || StreamingDataSource, EditableDataSource, BindableDataSource<T> ||
