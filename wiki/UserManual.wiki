= Introduction =

= Quick Start=

== Install ==

== Sample Application ==

== Create an Application ==

= Coding Client Side =

== Building User Interface ==

Any GWT widget can be used to build user interface. However, to be able to use a widget declaratively inside a HTML page, you need to have a _*Crux*_ _WidgetFactory_ registered for this widget. 

Default _*Crux*_ distribution provides factories for all widgets delivered in GWT default distribution and for other advanced ones. To create and register factories for your own widgets, consult the [ComponentDeveloperManual Component Developer Manual].

To use a widget included in the [http://code.google.com/intl/pt-BR/webtoolkit/doc/1.6/DevGuideUserInterface.html GWT default distribution], you must ensure that the file crux-basicwidgets.jar is present in the WEB-INF/lib folder of your application. 

You can create widgets on your page using one of the tree methods:
  # Declare a _`<span>`_ tag with an attribute `_`type to inform the widget you want to add to the page (it must match the name used to register the widget under _*Crux*_).
  # Use _*HtmlTags*_ tool to build a page as a XML page and use some XSDs to enable auto completition on your favorite editor.
  # Create programatically a widget in the same way you already do using GWT alone. 

===Writing HTML Pages===
The following code is an example of the first method:
{{{
<html>
   <head>
       <script language='javascript' src='cruxtest/cruxtest.nocache.js'></script>
   </head>
   <body>
       <span id='myBox' _type='textBox' />
       <span id='myButton' _type='button' _value='Hello' _onclick='clientHandler.helloWorld' />
   </body>
</html>
}}} 

If you choose to create widgets by _`<span>`_ tags, you can consult the following [Widgets#Basic_Widgets table] to verify the type for all GWT widgets.

===Writing XML Pages===
Now, you can see an example of the second method:
{{{
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:crux="http://www.sysmap.com.br/crux/ui/1.0" >
   <head>
       <script language="javascript" src="cruxtest/cruxtest.nocache.js"></script>
   </head>
   <body>
       <crux:textBox id="myBox" />
       <crux:button id="myButton" value="Hello" onClick="clientHandler.helloWorld" />
   </body>
</html>
}}} 

If you decide to use this approach, you must attempt to:
  # Your files must have the extension *_.crux.xml_*.
  # In order to enable auto completition, you need to configure your IDE to point to the following XSD files:
    * [xhtml.xsd xhtml.xsd]
    * [crux-basicwidgets.xsd crux-basicwidgets.xsd]
    * [crux-advancedwidgets.xsd crux-advancedwidgets.xsd]
  # 
== Managing Events ==

== I18N ==

== Client-Server Communication ==

= Coding Server Side =

== I18N ==

= Extending and Customizing =