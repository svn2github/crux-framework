= Introduction =

= Quick Start=

== Install ==

== Sample Application ==

== Create an Application ==

= Coding Client Side =

_*Crux*_ applications are basically GWT applications. It means that you must attempt to all GWT restrictions in terms of source code limitations an project structure directives.

If you are not familiar with GWT, please consult its [http://code.google.com/intl/pt-BR/webtoolkit/ documentation] first.

Your modules must inherits _*br.com.sysmap.crux.core.Crux.gwt.xml*_. You don't need to specify an EntryPoint, because _*Crux*_ defines a basic one that starts a parser on page document to replace the marker `<span>` tags to widgets. 

If you need to create a new EntryPoint, your class must override the _*Crux*_ EntryPoint ({{{br.com.sysmap.crux.core.client.JSEngine}}}) and call super on your onModuleLoad() method.

The following example shows a module that can use any widget provided by default distribution of Crux:
{{{
<module rename-to='singlemodule'>
	<inherits name='br.com.sysmap.crux.core.Crux'/>
	<inherits name='br.com.sysmap.crux.basic.CruxBasicWidgets'/>
	<inherits name='br.com.sysmap.crux.advanced.CruxAdvancedWidgets'/>
</module>
}}}

The code above creates a module that inherits the _*Crux*_ core and the two sets of widgets that compose the default distribution. The BasicWidgets set contains all widgets that is distributed directly with GWT. The Advanced set contains some complex widgets like MaskedTexBox, multi-frame capable dialogs etc.

== Building User Interface ==

Any GWT widget can be used in user interface construction. Default _*Crux*_ distribution supports the use of any widget included in the [http://code.google.com/intl/pt-BR/webtoolkit/doc/1.6/DevGuideUserInterface.html GWT default distribution]. To use any of those widgets, you must ensure that the file crux-basicwidgets.jar is present in the WEB-INF/lib folder of your application. Adavanced widgets are also availabe through crux-advancedwidgets.jar. Consult the [ComponentDeveloperManual Component Developer Manual] for informations about how to use custom widgets with _*Crux*_.

To add widgets to your pages, you can use one of these three methods:
  # Declare a _`<span>`_ tag with an attribute `_`type to inform which widget you want to add to the page.
  # Use _*HtmlTags*_ tool to build a page as a XML page and use some XSDs to enable auto completition on your favorite editor.
  # Create programatically a widget exactly as you already do using GWT alone. 

===Writing HTML Pages===
The following code is an example of the first method:
{{{
<html>
   <head>
       <script language='javascript' src='cruxtest/cruxtest.nocache.js'></script>
   </head>
   <body>
       <span id='myBox' _type='textBox' />
       <span id='myButton' _type='button' _value='Hello' _onclick='clientHandler.helloWorld' />
   </body>
</html>
}}} 

You can consult the following [Widgets#Basic_Widgets table] to verify the type for default GWT widgets.



===Writing XML Pages===
Now, you can see an example of the second method:
{{{
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:crux="http://www.sysmap.com.br/crux/ui/1.0" >
   <head>
       <script language="javascript" src="cruxtest/cruxtest.nocache.js"></script>
   </head>
   <body>
       <crux:textBox id="myBox" />
       <crux:button id="myButton" value="Hello" onClick="clientHandler.helloWorld" />
   </body>
</html>
}}} 

If you decide to use this approach, you must attempt to:
  # Your files must have the extension *_.crux.xml_*.
  # In order to enable auto completition, you need to configure your IDE to point to the following XSD files:
    * [xhtml.xsd xhtml.xsd]
    * [crux-basicwidgets.xsd crux-basicwidgets.xsd]
    * [crux-advancedwidgets.xsd crux-advancedwidgets.xsd]
  # Configure the HtmlTagsFilter in your web.xml files as following:
{{{
<filter>
   <display-name>HtmlTagsFilter</display-name>
   <filter-name>HtmlTagsFilter</filter-name>
   <filter-class>br.com.sysmap.crux.tools.htmltags.filter.HtmlTagsFilter</filter-class>
   <init-param>
      <param-name>outputCharset</param-name>
      <param-value>ISO-8859-1</param-value>
   </init-param>
</filter>
<filter-mapping>
   <filter-name>HtmlTagsFilter</filter-name>
   <url-pattern>*.html</url-pattern>
</filter-mapping>
}}}

Note that if you use the [UserManual#CruxProjectGenerator Crux Project Generator], it will already configure the filter for you.

This filter will intercept the requests to transform your *_.crux.xml_* files in *_.html_* files that uses _`<span>`_ tags, exactly as the page showed in the first method. Itjust need to be done in a development scenario. Before you put your application in production, you compile your code (see [UserManual#Compilation compilation]) and the transformation is done only at this moment.

If the filter is used in a production scenario, it will just do nothing. 

===Creating Widgets Programatically===

You can create widgets exactly as you create using GWT directly. The main difference is that you don't need to extend the EntryPoint interface to put your code.

_*Crux*_ provides a default EntryPoint that will start the process of parsing the page to build the widgets.

You can add an EventHandler to be called when the screen is loaded (see [UserManual#Managing_Events Managing Events] to more details about events). 

Inside your EventHandler, you can build Widgets as in the following example:
{{{
   ...
   Button myButton = new Button();
   myButton.addClickHandler(new ClickHandler(){
      public void onClick(ClickEvent event)
      {
          Window.alert("hello");
      }
   });
   ...
}}}


== Managing Events ==

== I18N ==

== Client-Server Communication ==

= Coding Server Side =

== I18N ==

= Extending and Customizing =