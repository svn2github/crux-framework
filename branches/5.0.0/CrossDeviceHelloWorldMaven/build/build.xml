<project name="CrossDeviceHelloWorldMaven" basedir="../">

	<property name="final.name" value="CrossDeviceHelloWorldMaven" />
	<property name="src.root.dir" value="src" />
	<property name="dist.dir" value="dist" />
	<property name="temp.dir" value="${dist.dir}/temp" />

	<property name="xsd.dir" value="xsd" />
	<property file="build/build.properties" />
	<property file="build/version.properties" />
	<property name="snapshots.dir" value="snapshots" />
	
	<!-- maven mod -->
	<property name="target.root" value="target/CrossDeviceHelloWorldMaven-5.0.0" />
	<property name="src.dir" value="src/main/java" />
	<property name="resources.dir" value="src/main/resources" />
	<property name="web.dir" value="src/main/webapp" />
	<property name="web.inf.dir" value="${web.dir}/WEB-INF" />
	<property name="target.lib.dir" value="${target.root}/WEB-INF/lib" />

	<property name="target.classes.dir" value="E:\desenv\workspaces\workspace-crux-5\CrossDeviceHelloWorldMaven/target/CrossDeviceHelloWorldMaven-5.0.0/WEB-INF/classes" />
		
	<property name="webappctxname" value="CrossDeviceHelloWorldMaven-5.0.0"/>
	<property name="gwt.args" value="-gen generated -bindAddress 0.0.0.0 -logLevel INFO"/>
	<property name="module.name" value="org.cruxframework.crossdevice.helloworld.CrossDeviceHelloWorld"/>
	
	<path id="target.build.classpath">
		<fileset dir="${target.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<taskdef resource="org/cruxframework/crux/tools/crux-modules-tools.xml">
		<classpath>
			<path refid="target.build.classpath" />
		</classpath>
	</taskdef>

	<target name="debug">
		<!-- you are going to run com.google.gwt.dev.DevMode class. So below, you are just specifying its classpath and the arguments. -->
		<!-- if you want normal mode change to: -->
		<!--<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode"> -->
			  <java failonerror="true" fork="true" classname="org.cruxframework.crux.module.launch.ModulesLauncher"> 
			<classpath>

				<pathelement location="${basedir}/target/${webappctxname}/WEB-INF/classes" />

				<!-- old -->
				<!-- <pathelement location="${gwt.sdk}/gwt-user.jar" /> -->
				<pathelement location="${basedir}/target/${webappctxname}/WEB-INF/libs" />

				<!-- old -->
				<!-- <fileset dir="${gwt.sdk}" includes="gwt-dev*.jar" /> -->

				<fileset dir="${basedir}/target/${webappctxname}/WEB-INF/lib" includes="**/*.jar" />

				<!-- the following is required because thatâ€™s where DevMode will find the java code for the GWT javascripts. -->
				<pathelement location="${basedir}/src/main/java" />
				<pathelement location="${basedir}/src/main/resources" />

			</classpath>
			<!-- <arg value="-server"/> -->
			<!-- <arg value="org.cruxframework.crux.core.server.launcher.CruxJettyLauncher"/> -->

			<jvmarg value="-Xss10768k" />
			<jvmarg value="-Xms800M" />
			<jvmarg value="-Xmx800M" />

			<jvmarg value="-Xdebug" />
			<jvmarg value="-DCrux.dev=true" />
			<jvmarg value="-Djava.naming.factory.initial=org.mortbay.naming.InitialContextFactory" />
			<jvmarg value="-DdebugEnabled=true" />
			<!-- <jvmarg value="DserverName=AdminServer"/> -->
			<!-- <jvmarg value="-Dcom.sun.xml.bind.v2.runtime.JAXBContextImpl.fastBoot=true"/> -->

			<!-- This will cause the process to open a up port 5555 for debugger. -->
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5555" />
			<jvmarg value="-Xnoagent" />
			<jvmarg value="-Djava.compiler=NONE" />

			<!-- The following arguments are for the GWT WebServer DevMode -->
			<arg value="-startupUrl" />
			<arg value="index.html" />

			<arg value="-war" />
			<arg value="target/${webappctxname}" />

			<arg line="${gwt.args}" />
			<arg value="${module.name}" />
		</java>

	</target>


	<!-- 
	========================================================================================================
		Generates the war for distribution
	========================================================================================================
	-->
	<target name="export-war">

		<delete dir="${temp.dir}" failonerror="no" includeemptydirs="yes" includes="**/*" />
		<mkdir dir="${temp.dir}" />

		<copydir dest="${temp.dir}/webroot" src="${web.dir}" />

		<cruxcompiler srcDir="${src.root.dir}" keepPagesGeneratedFiles="true" outputDir="${temp.dir}/webroot" 
			webDir="${temp.dir}/webroot" pagesOutputDir="${temp.dir}/webroot" outputCharset="UTF-8">
			<dirset dir="${temp.dir}/webroot" />
			<classpath>
				<path refid="target.build.classpath" />
			</classpath>

			<!-- change these two parameters if you need to modify memory settings -->
			<jvmarg value="-Xmx768M" />
			<jvmarg value="-Xms256M" />

			<arg value="-localWorkers" />
			<arg value="2" />

			<!-- use these parameters if you want to modify GWT output settings
			<arg value="-style"/>
			<arg value="DETAILED"/>
			<arg value="-logLevel"/>
			<arg value="DEBUG"/>
			-->
		</cruxcompiler>

		<delete>
			<fileset dir="${temp.dir}/webroot">
				<include name="**/*.crux.xml"/>
				<include name="**/*.template.xml"/>
			</fileset>
		</delete>

		<blockremove beginmarker="&lt;!--antReplacementBlockBegin--&gt;" endmarker="&lt;!--antReplacementBlockEnd--&gt;" file="${temp.dir}/webroot/WEB-INF/web.xml" />

		<serviceMapper projectDir="${temp.dir}/webroot">
			<classpath>
				<path refid="target.build.classpath" />
				<pathelement path="${target.classes.dir}" />
			</classpath>
		</serviceMapper>

		<mkdir dir="${snapshots.dir}"/>
		<copydir dest="${temp.dir}/webroot/WEB-INF/classes" src="${snapshots.dir}" />

		<war basedir="${temp.dir}/webroot" destfile="${temp.dir}/${final.name}.war" webxml="${web.inf.dir}/web.xml">
			<manifest>
				<attribute name="Class-Path" value="${final.name}.war" />
			</manifest>
		</war>
		<move file="${temp.dir}/${final.name}.war" tofile="${dist.dir}/${final.name}.war" />
		<delete dir="${dist.dir}/${final.name}" failonerror="no" includeemptydirs="yes" />
		<unzip dest="${dist.dir}/${final.name}" src="${dist.dir}/${final.name}.war">
		</unzip>
		<delete dir="${temp.dir}" failonerror="no" includeemptydirs="yes" />
	</target>

	<!-- 
	========================================================================================================
		Invokes the GWT compiler. Usefull for debugging generated Javascript
	========================================================================================================
	-->
	<target name="compile-scripts">
		<cruxcompiler srcDir="${src.dir}" outputDir="${target.root}" webDir="${web.dir}" keepPagesGeneratedFiles="false" outputCharset="UTF-8">
			<dirset dir="${web.dir}" />
			<classpath>
				<path refid="target.build.classpath" />
				<pathelement path="${src.dir}" />
			    <pathelement path="${resources.dir}" />
				<pathelement path="${target.classes.dir}" />
			</classpath>

			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5555" />
            <jvmarg value="-Xnoagent" />
            <jvmarg value="-Djava.compiler=NONE" />
			
			<!-- change these two parameters if you need to modify memory settings -->
			<jvmarg value="-Xmx768M" />
			<jvmarg value="-Xms256M" />

			<arg value="-localWorkers" />
			<arg value="2" />
			<arg value="-gen"/>
			<arg value="generated"/>
			<!-- use these parameters if you want to modify GWT output settings
			<arg value="-style"/>
			<arg value="DETAILED"/>
			<arg value="-logLevel"/>
			<arg value="DEBUG"/>
			-->
		</cruxcompiler>
	</target>
	
	<!-- 
	========================================================================================================
		Invokes the GWT compiler with draftCompile option.
	========================================================================================================
	-->
	<target name="fast-compile-scripts">
		<cruxcompiler srcDir="${src.root.dir}" outputDir="${web.dir}" webDir="${web.dir}" keepPagesGeneratedFiles="false" outputCharset="UTF-8">
			<dirset dir="${web.dir}" />
			<classpath>
				<path refid="target.build.classpath" />
				<pathelement path="${web.dir}" />
				<pathelement path="${target.classes.dir}" />
			</classpath>

			<!-- change these two parameters if you need to modify memory settings -->
			<jvmarg value="-Xmx768M" />
			<jvmarg value="-Xms256M" />

			<arg value="-draftCompile" />

			<!-- use these parameters if you want to modify GWT output settings
			<arg value="-style"/>
			<arg value="DETAILED"/>
			<arg value="-logLevel"/>
			<arg value="DEBUG"/>
			-->
		</cruxcompiler>
	</target>


	<!-- 
	========================================================================================================
		Generate XSD Files, based on Crux widgets libraries found on classpath
	========================================================================================================
	-->
	<target name="generate-schemas">
		<generateSchemas outputDir="${xsd.dir}">
			<classpath>
				<path refid="target.build.classpath" />
				<pathelement path="${target.classes.dir}" />
				<pathelement path="${web.dir}" />
				<pathelement location="${src.root.dir}" />
			</classpath>
		</generateSchemas>
	</target>

	<!--
	========================================================================================================
		Incrementa a versao do build
	========================================================================================================
	-->
	<target name="set-version">
		<propertyfile file="build/version.properties">
			<entry key="appengine.version" default="0" type="int" operation="+" value="1" />
		</propertyfile>
		<replace dir="${dist.dir}/${final.name}/WEB-INF" includes="appengine-web.xml" propertyFile="build/version.properties">
			<replacefilter token="#[appengine.version]" property="appengine.version" />
		</replace>
	</target>

	<!-- 
	========================================================================================================
		Generate Gadget and publish it on appEngine
	========================================================================================================
	-->
	<target name="dist">
		<delete dir="${dist.dir}" failonerror="yes" includeemptydirs="no" includes="**/*" />
		<mkdir dir="${dist.dir}" />

		<antcall target="export-war" />
		<antcall target="set-version" />
		<!-- antcall target="publish" / -->

	</target>

	<!-- 
	========================================================================================================
		Publish on appEngine
	========================================================================================================
	-->
	<target name="publish">
		<!--
		<appcfg action="update" war="${dist.dir}/generated/RssGadget.war" >
		</appcfg>
		-->
		<input addproperty="appengine.email" message="Informe o seu email associado Ã  conta do AppEngine:" />
		<input addproperty="appengine.password" message="Informe a senha da sua conta no AppEngine:" />

		<java classname="com.google.appengine.tools.admin.AppCfg" inputstring="${appengine.password}">
			<sysproperty key="appengine.sdk.root" value="${sdk.dir}" />
			<classpath>
				<fileset dir="${sdk.dir}/lib" includes="**/*.jar" />
			</classpath>
			<arg value="--email=${appengine.email}" />
			<arg value="--passin" />
			<arg value="update" />
			<arg value="../${dist.dir}/${final.name}" />
		</java>
	</target>

	<!-- 
	========================================================================================================
		Generate Snapshot
	========================================================================================================
	-->
	<target name="generateHTMLSnapshots">
		<delete dir="${snapshots.dir}" failonerror="no" includeemptydirs="yes" includes="**/*" />
		<mkdir dir="${snapshots.dir}" />

		<java classname="org.cruxframework.crux.tools.crawling.CrawlingTool" fork="true">
			<classpath>
				<pathelement path="${build/htmlunit}" />
				<path refid="target.build.classpath" />
				<pathelement path="${target.classes.dir}" />
				<pathelement path="${web.dir}" />
				<pathelement location="${src.root.dir}" />
			</classpath>
			<!--jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=3331,server=y,suspend=y" /-->

			<arg value="outputDir" />
			<arg value="${snapshots.dir}" />
			<arg value="applicationBaseURL" />
			<arg value="http://localhost:8888/" />
			<arg value="javascriptTime" />
			<arg value="30000" />
			<arg value="urls" />
			<arg value="build/urlsSnapshot.txt" />
			<arg value="stopOnErrors" />
			<arg value="false" />
		</java>
	</target>


</project>